name: Add PR Template Comment
on:
  issues:
    types: [opened]

jobs:
  add-comment:
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Extract form data
        id: form
        run: |
          # Convert the markdown form to JSON
          JSON_DATA=$(echo '${{ github.event.issue.body }}' | jq -R -s 'split("### ")[1:] | map(
            select(length > 0) |
            capture("(?<key>[^\n]+)\n*(?<value>.*)")
          ) | from_entries')

          # Extract values with defaults using jq
          NAME=$(echo $JSON_DATA | jq -r '.Name // "[Your submission name]"' | tr -d '\n')
          DESCRIPTION=$(echo $JSON_DATA | jq -r '.Description // "[Your description]"' | tr -d '\n')
          LINK=$(echo $JSON_DATA | jq -r '.Link // "[Your link]"' | tr -d '\n')
          LAYER=$(echo $JSON_DATA | jq -r '.Layer // "[Selected layer]"' | tr -d '\n')
          COMPONENTS=$(echo $JSON_DATA | jq -r '.Components // "[Component categories]"' | tr -d '\n')
          LICENSE=$(echo $JSON_DATA | jq -r '.License // "[Selected license type]"' | tr -d '\n')
          TYPE=$(echo $JSON_DATA | jq -r '.Type // "[Selected type]"' | tr -d '\n')
          USAGE=$(echo $JSON_DATA | jq -r '.Usage // "[Usage description]"' | tr -d '\n')

          # Debug output
          echo "JSON Data:"
          echo "$JSON_DATA" | jq '.'
          echo 
          echo "Extracted values:"
          echo "NAME: $NAME"
          echo "DESCRIPTION: $DESCRIPTION"
          echo "LINK: $LINK"
          echo "LAYER: $LAYER"
          echo "COMPONENTS: $COMPONENTS"
          echo "LICENSE: $LICENSE"
          echo "TYPE: $TYPE"
          echo "USAGE: $USAGE"

          # Output extracted values using GITHUB_OUTPUT
          {
            echo "name=$NAME"
            echo "description=$DESCRIPTION"
            echo "link=$LINK"
            echo "layer=$LAYER"
            echo "components=$COMPONENTS"
            echo "license=$LICENSE"
            echo "type=$TYPE"
            echo "usage=$USAGE"
          } >> $GITHUB_OUTPUT

      - name: Add Tech Stack PR Template Comment
        if: contains(github.event.issue.labels.*.name, 'tech-stack')
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            Thanks for submitting a new tech stack item! Here's a template for the PR that you or anyone else can submit to add this to `techStackData.ts`:

            ```typescript
            {
              Name: '${{ steps.form.outputs.name }}',
              Description: '${{ steps.form.outputs.description }}',
              Link: '${{ steps.form.outputs.link }}',
              Layer: '${{ steps.form.outputs.layer }}',
              Components: '${{ steps.form.outputs.components }}',
              License: '${{ steps.form.outputs.license }}',
            },
            ```

            To submit:
            1. Fork the repository
            2. Add your entry to the end of the array in `src/data/techStackData.ts`
            3. Create a pull request

            Make sure to:
            - Match the exact format of existing entries
            - Include a comment in your PR linking back to this issue

      - name: Add Model PR Template Comment
        if: contains(github.event.issue.labels.*.name, 'model')
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            Thanks for submitting a new model! Here's a template for the PR that you or anyone else can submit to add this to `modelsData.ts`:

            ```typescript
            {
              Name: '${{ steps.form.outputs.name }}',
              Description: '${{ steps.form.outputs.description }}',
              Link: '${{ steps.form.outputs.link }}',
              Type: '${{ steps.form.outputs.type }}',
              Usage: '${{ steps.form.outputs.usage }}',
              License: '${{ steps.form.outputs.license }}',
            },
            ```

            To submit:
            1. Fork the repository
            2. Add your entry to the end of the array in `src/data/modelsData.ts`
            3. Create a pull request

            Make sure to:
            - Match the exact format of existing entries
            - Include a comment in your PR linking back to this issue
